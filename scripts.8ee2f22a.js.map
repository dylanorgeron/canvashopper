{"version":3,"sources":["scripts/engine/canvas.ts","scripts/engine/debug.ts","node_modules/eventemitter3/index.js","scripts/engine/keystates.ts","scripts/map-generation/room-size.ts","scripts/map-generation/direction.ts","scripts/map-generation/coordinate.ts","scripts/map-generation/portal.ts","scripts/map-generation/tile.ts","scripts/map-generation/room.ts","scripts/map-generation/room-prefab-config.ts","scripts/map-generation/hallway.ts","scripts/map-generation/level.ts","scripts/player.ts","scripts/settings.ts","scripts/engine/camera.ts","scripts/index.ts"],"names":[],"mappings":";AAQA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAPA,IAAA,EAAA,SAAA,IAAA,EAAA,KAAA,GACoB,KAAA,cAAgB,SAAS,eAAe,eACxC,KAAA,UAAY,KAAK,cAAc,WAAW,MAC1C,KAAA,OAAS,KAAK,cAAc,OAC5B,KAAA,MAAQ,KAAK,cAAc,OAG/C,QAAA,QAAe;;ACuBf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/BA,IAAA,EAAA,QAAA,YAEA,EAAA,WAMC,SAAA,IAAA,EAAA,KAAA,GALU,KAAA,gBAAkB,EAClB,KAAA,gBAAkB,EAClB,KAAA,QAAU,EACV,KAAA,QAAU,EACV,KAAA,OAAS,GAGlB,EAAA,QAAQ,GAAG,gBAAiB,KAAK,OAAO,KAAK,OAqB/C,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAnBI,MAAA,WACU,IAAA,EAAgB,SAAS,eAAe,YAC3C,GAAA,EAAc,CACT,IAAA,EAEiB,oCAAA,OAAA,KAAK,gBAEL,uDAAA,OAAA,KAAK,gBAEd,8CAAA,OAAA,KAAK,QAEL,8CAAA,OAAA,KAAK,QARjB,oCAWA,EAAc,UAAY,OAKtC,EA7BA,GA6BA,QAAA,QAAe;;AC/Bf,aAEA,IAAA,EAAA,OAAA,UAAA,eACA,EAAA,IASA,SAAA,KA4BA,SAAA,EAAA,EAAA,EAAA,GACA,KAAA,GAAA,EACA,KAAA,QAAA,EACA,KAAA,KAAA,IAAA,EAcA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,GAAA,mBAAA,EACA,MAAA,IAAA,UAAA,mCAGA,IAAA,EAAA,IAAA,EAAA,EAAA,GAAA,EAAA,GACA,EAAA,EAAA,EAAA,EAAA,EAMA,OAJA,EAAA,QAAA,GACA,EAAA,QAAA,GAAA,GACA,EAAA,QAAA,GAAA,CAAA,EAAA,QAAA,GAAA,GADA,EAAA,QAAA,GAAA,KAAA,IADA,EAAA,QAAA,GAAA,EAAA,EAAA,gBAIA,EAUA,SAAA,EAAA,EAAA,GACA,KAAA,EAAA,aAAA,EAAA,QAAA,IAAA,SACA,EAAA,QAAA,GAUA,SAAA,IACA,KAAA,QAAA,IAAA,EACA,KAAA,aAAA,EAxEA,OAAA,SACA,EAAA,UAAA,OAAA,OAAA,OAMA,IAAA,GAAA,YAAA,GAAA,IA2EA,EAAA,UAAA,WAAA,WACA,IACA,EACA,EAFA,EAAA,GAIA,GAAA,IAAA,KAAA,aAAA,OAAA,EAEA,IAAA,KAAA,EAAA,KAAA,QACA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,EAAA,MAAA,GAAA,GAGA,OAAA,OAAA,sBACA,EAAA,OAAA,OAAA,sBAAA,IAGA,GAUA,EAAA,UAAA,UAAA,SAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,KAAA,QAAA,GAEA,IAAA,EAAA,MAAA,GACA,GAAA,EAAA,GAAA,MAAA,CAAA,EAAA,IAEA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IACA,EAAA,GAAA,EAAA,GAAA,GAGA,OAAA,GAUA,EAAA,UAAA,cAAA,SAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,KAAA,QAAA,GAEA,OAAA,EACA,EAAA,GAAA,EACA,EAAA,OAFA,GAYA,EAAA,UAAA,KAAA,SAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAEA,IAAA,KAAA,QAAA,GAAA,OAAA,EAEA,IAEA,EACA,EAHA,EAAA,KAAA,QAAA,GACA,EAAA,UAAA,OAIA,GAAA,EAAA,GAAA,CAGA,OAFA,EAAA,MAAA,KAAA,eAAA,EAAA,EAAA,QAAA,GAAA,GAEA,GACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,UAAA,EACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,IAAA,EACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,EAAA,IAAA,EACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,EAAA,EAAA,IAAA,EACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,EAAA,EAAA,EAAA,IAAA,EACA,KAAA,EAAA,OAAA,EAAA,GAAA,KAAA,EAAA,QAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAGA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,UAAA,GAGA,EAAA,GAAA,MAAA,EAAA,QAAA,OACA,CACA,IACA,EADA,EAAA,EAAA,OAGA,IAAA,EAAA,EAAA,EAAA,EAAA,IAGA,OAFA,EAAA,GAAA,MAAA,KAAA,eAAA,EAAA,EAAA,GAAA,QAAA,GAAA,GAEA,GACA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,GAAA,SAAA,MACA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,GAAA,QAAA,GAAA,MACA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,GAAA,QAAA,EAAA,GAAA,MACA,KAAA,EAAA,EAAA,GAAA,GAAA,KAAA,EAAA,GAAA,QAAA,EAAA,EAAA,GAAA,MACA,QACA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,GAAA,EAAA,EAAA,IACA,EAAA,EAAA,GAAA,UAAA,GAGA,EAAA,GAAA,GAAA,MAAA,EAAA,GAAA,QAAA,IAKA,OAAA,GAYA,EAAA,UAAA,GAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,KAAA,EAAA,EAAA,GAAA,IAYA,EAAA,UAAA,KAAA,SAAA,EAAA,EAAA,GACA,OAAA,EAAA,KAAA,EAAA,EAAA,GAAA,IAaA,EAAA,UAAA,eAAA,SAAA,EAAA,EAAA,EAAA,GACA,IAAA,EAAA,EAAA,EAAA,EAAA,EAEA,IAAA,KAAA,QAAA,GAAA,OAAA,KACA,IAAA,EAEA,OADA,EAAA,KAAA,GACA,KAGA,IAAA,EAAA,KAAA,QAAA,GAEA,GAAA,EAAA,GAEA,EAAA,KAAA,GACA,IAAA,EAAA,MACA,GAAA,EAAA,UAAA,GAEA,EAAA,KAAA,OAEA,CACA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,EAAA,OAAA,EAAA,EAAA,KAEA,EAAA,GAAA,KAAA,GACA,IAAA,EAAA,GAAA,MACA,GAAA,EAAA,GAAA,UAAA,IAEA,EAAA,KAAA,EAAA,IAOA,EAAA,OAAA,KAAA,QAAA,GAAA,IAAA,EAAA,OAAA,EAAA,GAAA,EACA,EAAA,KAAA,GAGA,OAAA,MAUA,EAAA,UAAA,mBAAA,SAAA,GACA,IAAA,EAUA,OARA,GACA,EAAA,EAAA,EAAA,EAAA,EACA,KAAA,QAAA,IAAA,EAAA,KAAA,KAEA,KAAA,QAAA,IAAA,EACA,KAAA,aAAA,GAGA,MAMA,EAAA,UAAA,IAAA,EAAA,UAAA,eACA,EAAA,UAAA,YAAA,EAAA,UAAA,GAKA,EAAA,SAAA,EAKA,EAAA,aAAA,EAKA,oBAAA,SACA,OAAA,QAAA;;AC9RA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhDA,IAAA,EAAA,WAAA,SAAA,IAAA,EAAA,KAAA,GACoB,KAAA,UAAY,GACZ,KAAA,QAAU,GACV,KAAA,WAAa,GACb,KAAA,UAAY,GACZ,KAAA,MAAQ,GACR,KAAA,KAAO,GACP,KAAA,KAAO,GACP,KAAA,KAAO,GACP,KAAA,KAAO,GAEhB,KAAA,mBAAoB,EACpB,KAAA,iBAAkB,EAClB,KAAA,oBAAqB,EACrB,KAAA,mBAAoB,EACpB,KAAA,eAAgB,EAiC3B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA/BI,MAAA,SAAO,EAAgB,GACX,OAAA,GACC,KAAA,KAAK,UACL,KAAA,KAAK,KACD,KAAA,kBAAoB,EACtB,IACM,KAAA,oBAAqB,GAE9B,MACC,KAAA,KAAK,KACD,KAAA,KAAK,QACL,KAAA,gBAAkB,EACvB,MACC,KAAA,KAAK,WACL,KAAA,KAAK,KACD,KAAA,mBAAqB,EACvB,IACM,KAAA,mBAAoB,GAE7B,MACC,KAAA,KAAK,KACL,KAAA,KAAK,UACD,KAAA,kBAAoB,EACzB,MACC,KAAA,KAAK,MACD,KAAA,cAAgB,OAMrC,EAhDA,GAgDA,QAAA,QAAe;;AC1Cf,aANA,IAAY,EAMZ,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IANA,SAAY,GACR,EAAA,EAAA,MAAA,GAAA,QACA,EAAA,EAAA,OAAA,GAAA,SACA,EAAA,EAAA,MAAA,GAAA,QAHJ,CAAY,EAAA,QAAA,WAAA,QAAA,SAAQ,KAMpB,QAAA,QAAe;;ACCf,aAPA,IAAK,EAOL,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAPA,SAAK,GACD,EAAA,GAAA,KACA,EAAA,KAAA,OACA,EAAA,KAAA,OACA,EAAA,MAAA,QAJJ,CAAK,IAAA,EAAS,KAOd,QAAA,QAAe;;ACHf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAJA,IAAA,EACI,SAAmB,EAAA,EAAkB,GAAS,EAAA,KAAA,GAA3B,KAAA,EAAA,EAAkB,KAAA,EAAA,GAGzC,QAAA,QAAe;;ACaf,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,GAAA,mBAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,sDAAA,EAAA,UAAA,OAAA,OAAA,GAAA,EAAA,UAAA,CAAA,YAAA,CAAA,MAAA,EAAA,UAAA,EAAA,cAAA,KAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,OAAA,EAAA,OAAA,gBAAA,SAAA,EAAA,GAAA,OAAA,EAAA,UAAA,EAAA,IAAA,EAAA,GAAA,SAAA,EAAA,GAAA,IAAA,EAAA,IAAA,OAAA,WAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,IAAA,EAAA,EAAA,MAAA,YAAA,EAAA,QAAA,UAAA,EAAA,UAAA,QAAA,EAAA,EAAA,MAAA,KAAA,WAAA,OAAA,EAAA,KAAA,IAAA,SAAA,EAAA,EAAA,GAAA,GAAA,IAAA,WAAA,EAAA,IAAA,mBAAA,GAAA,OAAA,EAAA,QAAA,IAAA,EAAA,MAAA,IAAA,UAAA,4DAAA,OAAA,EAAA,GAAA,SAAA,EAAA,GAAA,QAAA,IAAA,EAAA,MAAA,IAAA,eAAA,6DAAA,OAAA,EAAA,SAAA,IAAA,GAAA,oBAAA,UAAA,QAAA,UAAA,OAAA,EAAA,GAAA,QAAA,UAAA,KAAA,OAAA,EAAA,GAAA,mBAAA,MAAA,OAAA,EAAA,IAAA,OAAA,QAAA,UAAA,QAAA,KAAA,QAAA,UAAA,QAAA,GAAA,gBAAA,EAAA,MAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,OAAA,eAAA,OAAA,eAAA,SAAA,GAAA,OAAA,EAAA,WAAA,OAAA,eAAA,KAAA,GAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAjBA,IAAA,EAAA,EAAA,QAAA,iBAGA,EAAA,SAAA,GAcA,EAAA,EAdqB,EAAA,SAcrB,IAAA,EAAA,EAAA,GANgB,SAAA,EAAA,EAAW,EAAW,GAAoB,IAAA,EAAA,OAAA,EAAA,KAAA,IAC5C,EAAA,EAAA,KAAA,KAAA,EAAG,IAJN,YAAsB,EACtB,EAAA,QAAkB,EAIhB,EAAA,UAAY,EAFiC,EAM1D,OAAA,EAdA,GAcA,QAAA,QAAe;;ACkDf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnEA,IAAA,EAAA,QAAA,YACA,EAAA,EAAA,QAAA,iBAEA,EAAA,WAWS,SAAA,EAAA,EACA,EACA,GAAgB,EAAA,KAAA,GAFhB,KAAA,IAAA,EACA,KAAA,IAAA,EACA,KAAA,QAAA,EAZD,KAAA,EAAI,EAAA,SAAS,SACb,KAAA,EAAI,EAAA,SAAS,SAMb,KAAA,UAAY,GACZ,KAAA,IAAM,GAMZ,EAAA,QAAQ,GAAG,gBAAiB,KAAK,OAAO,KAAK,OAC7C,EAAA,QAAQ,GAAG,gBAAiB,KAAK,KAAK,KAAK,OACtC,KAAA,EAAI,KAAK,IAAM,KAAK,EACpB,KAAA,EAAI,KAAK,IAAM,KAAK,EA8C3B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SA3CC,MAAA,cA2CD,CAAA,IAAA,OAxCC,MAAA,WACM,KAAA,EAAI,EAAA,SAAS,SACb,KAAA,EAAI,EAAA,SAAS,SAEd,IACA,EAAS,IAAI,EAAA,QAChB,KAAK,EAAI,EAAA,OAAO,QAFD,EAGf,KAAK,EAAI,EAAA,OAAO,QAHD,GASZ,KAJH,EAAO,EAAI,EAAA,SAAS,SAAW,GAC/B,EAAO,EAAI,EAAA,OAAO,OAClB,EAAO,EAAI,EAAA,SAAS,SAAW,GAC/B,EAAO,EAAI,EAAA,OAAO,QAEd,GAAA,EAAA,SAAS,aAAc,CACtB,IAAA,EAAM,SAAS,eAAe,SAC9B,EAAS,IAAI,EAAA,QAAW,KAAK,EAAI,EAAA,OAAO,QAAS,KAAK,EAAI,EAAA,OAAO,SACrE,EAAA,OAAO,UAAU,UAAU,EAAK,EAAO,EAAG,EAAO,EAAG,KAAK,EAAG,KAAK,QAGjE,EAAA,OAAO,UAAU,UAAY,OAC7B,EAAA,OAAO,UAAU,SAChB,EAAO,EACP,EAAO,EACP,KAAK,EAAK,EACV,KAAK,EAAK,GAGX,EAAA,OAAO,UAAU,UAAY,KAAK,UAAY,KAAK,UAAY,KAAK,QAAU,OAAS,OACvF,EAAA,OAAO,UAAU,SAChB,KAAK,EAAI,EAAA,OAAO,QAChB,KAAK,EAAI,EAAA,OAAO,QAChB,KAAK,EACL,KAAK,OAOV,EAhEA,GAgEA,QAAA,QAAe;;ACUf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA7EA,IAAA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,aAEA,EAAA,EAAA,QAAA,WAEA,EAAA,WAMuB,SAAA,EAAA,EAAuB,EAA0B,GAExD,OAF8E,EAAA,KAAA,GAAvE,KAAA,KAAA,EAAuB,KAAA,OAAA,EAA0B,KAAA,YAAA,EAL7D,KAAA,QAAoB,GACpB,KAAA,MAAgB,GAChB,KAAA,EAAY,EACZ,KAAA,EAAY,EAIP,GACC,KAAA,EAAA,QAAS,MACL,KAAA,EAAI,EACJ,KAAA,EAAI,EACT,MACC,KAAA,EAAA,QAAS,OACL,KAAA,EAAI,EACJ,KAAA,EAAI,EACT,MACC,KAAA,EAAA,QAAS,MACL,KAAA,EAAI,EACJ,KAAA,EAAI,EAgBT,OARH,KAAA,QAAQ,KAAK,IAAI,EAAA,QAAO,EAAO,GAAK,KAAK,EAAI,GAAK,EAAG,EAAO,EAAG,EAAA,QAAU,KAEzE,KAAA,QAAQ,KAAK,IAAI,EAAA,QAAO,EAAO,GAAK,KAAK,EAAI,GAAK,EAAG,EAAO,EAAI,KAAK,EAAG,EAAG,EAAA,QAAU,OAErF,KAAA,QAAQ,KAAK,IAAI,EAAA,QAAO,EAAO,EAAG,EAAO,GAAK,KAAK,EAAI,GAAK,EAAG,EAAA,QAAU,OAEzE,KAAA,QAAQ,KAAK,IAAI,EAAA,QAAO,EAAO,EAAI,KAAK,EAAI,EAAG,EAAO,GAAK,KAAK,EAAI,GAAK,EAAG,EAAA,QAAU,QAEnF,KAAK,aACJ,KAAA,EAAA,QAAU,GACN,KAAA,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,YAAc,EAAA,QAAU,KAAI,GAAG,YAAa,EACvE,MACC,KAAA,EAAA,QAAU,KACN,KAAA,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,YAAc,EAAA,QAAU,OAAM,GAAG,YAAa,EACzE,MACC,KAAA,EAAA,QAAU,KACN,KAAA,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,YAAc,EAAA,QAAU,OAAM,GAAG,YAAa,EACzE,MACC,KAAA,EAAA,QAAU,MACN,KAAA,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,YAAc,EAAA,QAAU,QAAO,GAAG,YAAa,GAyB1F,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,gBAlBI,MAAA,WAGQ,IAAA,IAAI,EAAM,KAAK,OAAO,EAAG,EAAM,KAAK,EAAI,KAAK,OAAO,EAAG,IACnD,IAAA,IAAI,EAAM,KAAK,OAAO,EAAG,EAAM,KAAK,EAAI,KAAK,OAAO,EAAG,IAClD,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAK,GAAK,MAanD,CAAA,IAAA,oBARI,MAAA,WACW,OAAA,KAAK,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,aAAY,KAOtD,CAAA,IAAA,gBALI,MAAA,WACW,OAAA,KAAK,QAAQ,OAAO,SAAA,GAAK,OAAA,EAAE,SAAQ,OAIlD,EAvEA,GAuEA,QAAA,QAAe;;AC7Df,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhBA,IAAA,EAAA,EAAA,QAAA,gBAEA,EACI,SACW,EAAA,EACA,EACA,GAAS,EAAA,KAAA,GAFT,KAAA,KAAA,EACA,KAAA,EAAA,EACA,KAAA,EAAA,GAIF,QAAA,YAAkC,CAC3C,IAAI,EAAiB,EAAA,QAAS,MAAO,EAAG,GACxC,IAAI,EAAiB,EAAA,QAAS,OAAQ,EAAG,GACzC,IAAI,EAAiB,EAAA,QAAS,MAAO,EAAG,IAG5C,QAAA,QAAe;;ACgBf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAhCA,IAAA,EAAA,EAAA,QAAA,gBAEA,EAAA,EAAA,QAAA,WAEA,EAGI,SAAmB,EAAA,EAAyB,EAAc,GAE/C,OAF4D,EAAA,KAAA,GAApD,KAAA,SAAA,EAAyB,KAAA,KAAA,EAFrC,KAAA,MAAgB,GAGO,EAAS,WAE1B,KAAA,EAAA,QAAU,GACN,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAG,EAAS,EAAI,GAAG,IAChD,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAG,EAAS,EAAI,GAAG,IACrD,MACC,KAAA,EAAA,QAAU,KACN,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAG,EAAS,EAAI,GAAG,IAChD,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAG,EAAS,EAAI,GAAG,IACrD,MACC,KAAA,EAAA,QAAU,MACN,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAI,EAAG,EAAS,GAAG,IAChD,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAI,EAAG,EAAS,GAAG,IACrD,MACC,KAAA,EAAA,QAAU,KACN,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAI,EAAG,EAAS,GAAG,IAChD,KAAA,MAAM,KAAK,IAAI,EAAA,QAAK,EAAS,EAAI,EAAG,EAAS,GAAG,MAQrE,QAAA,QAAe;;ACiHf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IA/IA,IAAA,EAAA,EAAA,QAAA,WACA,EAAA,EAAA,QAAA,gBACA,EAAA,QAAA,wBACA,EAAA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,gBACA,EAAA,EAAA,QAAA,cAEA,EAAA,WAKqC,SAAA,IAArB,IAAA,EAAoB,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAAC,EAAA,KAAA,GAF1B,KAAA,MAAgB,GAChB,KAAA,SAAsB,GAEpB,KAAA,YAAY,GAkIzB,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,cA/HI,MAAA,SAAY,GAAiB,IAAA,EAAA,KAErB,GAAU,EACV,EAAQ,EACP,KAAA,MAAQ,GAGT,IAAA,EAAY,IAAI,EAAA,QAAK,EAAA,QAAS,MAAO,IAAI,EAAA,QAAW,EAAE,GAAI,EAAA,QAAU,IACxE,EAAU,gBACL,KAAA,MAAM,KAAK,GAGV,IAZmB,IAAA,EAAA,aAarB,GACY,IACR,GAAU,GAGV,IAAA,EAAe,EAAK,MAAM,EAAK,MAAM,OAAS,GAC9C,EAAgB,EAAK,iBAAiB,GACtC,EAAa,EAAc,KAAK,MAAM,KAAK,SAAW,EAAc,SAExE,EAAa,QAAQ,OAAO,SAAA,GACxB,OAAA,EAAE,YAAc,EAAK,qBAAqB,EAAW,eACvD,GAAG,QAAS,EAEd,EAAK,MAAM,KAAK,GAChB,EAAW,gBAEX,EAAK,SAAS,KAAK,IAAI,EAAA,QACnB,EAAa,gBACb,EAAW,oBACX,KApBF,GAAQ,IAwBd,QAAQ,IAAI,KAAK,SA2FzB,CAAA,IAAA,mBAxFK,MAAA,SAAiB,GAAU,IAAA,EAAA,KACpB,EAAwB,GA6CrB,OA1CP,EAAK,QAAQ,QAAQ,SAAA,GAIjB,EAAA,YAAY,QAAQ,SAAA,GACZ,IAAA,EAAiB,IAAI,EAAA,QAAW,EAAE,GAE9B,OAAA,EAAO,WAEN,KAAA,EAAA,QAAU,GACX,EAAe,EAAI,EAAO,GAAK,EAAO,EAAI,GAAK,EAC/C,EAAe,EAAI,EAAO,EAAI,EAAI,EAAO,EACzC,MACC,KAAA,EAAA,QAAU,KACX,EAAe,EAAI,EAAO,GAAK,EAAO,EAAI,GAAK,EAC/C,EAAe,EAAI,EAAO,EAAI,EAClC,MACK,KAAA,EAAA,QAAU,KACX,EAAe,EAAI,EAAO,EAAI,EAAO,EAAI,EACzC,EAAe,EAAI,EAAO,GAAK,EAAO,EAAI,GAAK,EACnD,MACK,KAAA,EAAA,QAAU,MACX,EAAe,EAAI,EAAO,EAAI,EAC9B,EAAe,EAAI,EAAO,GAAK,EAAO,EAAI,GAAK,EAMnD,IAAA,EAAU,IAAI,EAAA,QACd,EAAO,KACP,IAAI,EAAA,QAAW,EAAe,EAAG,EAAe,GAChD,EAAK,qBAAqB,EAAO,YAGlC,EAAe,GAAK,GAAK,EAAe,GAAK,IACzC,EAAO,WAAa,EAAA,QAAU,MAAQ,EAAO,WAAa,EAAA,QAAU,OACnE,EAAc,KAAK,QAK5B,IA0Cf,CAAA,IAAA,uBAvCI,MAAA,SAAqB,GACT,OAAA,GACC,KAAA,EAAA,QAAU,GACJ,OAAA,EAAA,QAAU,KAChB,KAAA,EAAA,QAAU,KACJ,OAAA,EAAA,QAAU,GAChB,KAAA,EAAA,QAAU,KACJ,OAAA,EAAA,QAAU,MAChB,KAAA,EAAA,QAAU,MACJ,OAAA,EAAA,QAAU,QA8BjC,CAAA,IAAA,kBAzBI,MAAA,SAAgB,EAAW,GACnB,IAAA,EAAO,KAeJ,OAdF,KAAA,MAAM,QAAQ,SAAA,GACf,EAAE,MAAM,QAAQ,SAAA,GACT,EAAE,KAAO,GAAK,EAAE,KAAO,IACtB,EAAO,OAId,KAAA,SAAS,QAAQ,SAAA,GAClB,EAAE,MAAM,QAAQ,SAAA,GACT,EAAE,KAAO,GAAK,EAAE,KAAO,IACtB,EAAO,OAIZ,IASf,CAAA,IAAA,cANI,MAAA,SAAY,EAAW,GACb,IAAA,EAAO,KAAK,gBAAgB,EAAG,GAC9B,OAAQ,MAAR,GAAgB,EAAK,YAIpC,EAxIA,GAwIA,QAAA,QAAe;;ACCf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAlJA,IAAA,EAAA,QAAA,WAUA,EAAA,WAQS,SAAA,EAAA,EACA,GAAS,EAAA,KAAA,GADT,KAAA,EAAA,EACA,KAAA,EAAA,EARD,KAAA,GAAK,EACL,KAAA,OAAS,EACT,KAAA,MAAQ,EACR,KAAA,UAAY,QACZ,KAAA,UAAoB,EAM1B,EAAA,OAAO,QAAU,EAAI,EAAA,OAAO,MAAQ,EACpC,EAAA,OAAO,QAAU,EAAI,EAAA,OAAO,OAAS,EACrC,EAAA,QAAQ,GAAG,gBAAiB,KAAK,OAAO,KAAK,OAC7C,EAAA,QAAQ,GAAG,gBAAiB,KAAK,KAAK,KAAK,OA0H7C,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAvHC,MAAA,WAEC,EAAA,OAAO,UAAU,UAAY,UAC7B,EAAA,OAAO,UAAU,SAChB,EAAA,OAAO,MAAQ,EAAI,KAAK,MAAO,EAC/B,EAAA,OAAO,OAAS,EAAI,KAAK,OAAQ,EACjC,KAAK,MACL,KAAK,UAgHR,CAAA,IAAA,SA5GC,MAAA,WAEK,IAAA,EAAQ,EAER,EAAA,UAAU,qBACR,KAAA,UAAY,QACjB,EAAQ,KAAK,UACR,KAAA,eAAe,IAEjB,EAAA,UAAU,oBACR,KAAA,UAAY,OACjB,GAA0B,EAAlB,KAAK,UACR,KAAA,eAAe,IAEjB,EAAA,UAAU,kBACR,KAAA,UAAY,KACjB,GAA0B,EAAlB,KAAK,UACR,KAAA,aAAa,IAEf,EAAA,UAAU,oBACR,KAAA,UAAY,OACjB,EAAQ,KAAK,UACR,KAAA,aAAa,IAInB,EAAA,MAAM,gBAAkB,KAAK,EAC7B,EAAA,MAAM,gBAAkB,KAAK,IAiF/B,CAAA,IAAA,eA9EC,MAAA,SAAa,GAET,GAAA,EAAQ,EACL,IAAA,IAAI,EAAI,EAAG,GAAK,EAAO,IAAK,CAE7B,GADE,KAAA,KACD,KAAK,mBAAmB,CACtB,KAAA,IACL,MAED,EAAA,OAAO,eAIH,IAAA,IAAI,GAAK,EAAG,GAAK,EAAO,IAAK,CAE9B,GADE,KAAA,KACD,KAAK,mBAAmB,CACtB,KAAA,IACL,MAED,EAAA,OAAO,aA2DX,CAAA,IAAA,iBAtDC,MAAA,SAAe,GAEX,GAAA,EAAQ,EACL,IAAA,IAAI,EAAI,EAAG,GAAK,EAAO,IAAK,CAE7B,GADE,KAAA,KACD,KAAK,mBAAmB,CACtB,KAAA,IACL,MAED,EAAA,OAAO,eAIH,IAAA,IAAI,GAAK,EAAG,GAAK,EAAO,IAAK,CAE9B,GADE,KAAA,KACD,KAAK,mBAAmB,CACtB,KAAA,IACL,MAED,EAAA,OAAO,aAmCX,CAAA,IAAA,mBA9BC,MAAA,WACK,IAAA,GAAkB,EAGhB,EAAsB,KAAK,MAAM,KAAK,EAAI,EAAA,SAAS,UAEnD,EAAuB,KAAK,OAAO,KAAK,EAAI,KAAK,OAAS,EAAA,SAAS,UAEnE,EAAqB,KAAK,MAAM,KAAK,EAAI,EAAA,SAAS,UAGlD,EAAwB,KAAK,OAAO,KAAK,EAAI,KAAK,OAAS,GAAK,EAAA,SAAS,UAexE,OATJ,EAAA,MAAM,YAAY,EAAqB,KAAqB,GAAkB,GAE9E,EAAA,MAAM,YAAY,EAAsB,KAAqB,GAAkB,GAE/E,EAAA,MAAM,YAAY,EAAqB,KAAwB,GAAkB,GAEjF,EAAA,MAAM,YAAY,EAAsB,KAAwB,GAAkB,GAG9E,MAIT,EAxIA,GAwIA,QAAA,QAAe;;AC/Hf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAnBA,IAAA,EAAA,EAAA,QAAA,gCAEA,EAAA,WAAA,SAAA,IAAA,EAAA,KAAA,GACW,KAAA,SAAW,GACX,KAAA,cAAe,EACf,KAAA,YAAc,IAAI,EAAA,QAAW,GAAG,IAChC,KAAA,eAAiB,EAa5B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,OAXI,MAAA,SAAK,GACD,EAAM,iBACH,EAAM,OAAS,EACT,KAAA,WAAa,EAGb,KAAA,UAAY,MAK7B,EAjBA,GAiBA,QAAA,QAAe;;ACLf,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAdA,IAAA,EAAA,QAAA,YAEA,EAGC,SAAA,IAAA,IAAA,EAAA,KAAA,EAAA,KAAA,GAFU,KAAA,QAAkB,EAClB,KAAA,QAAkB,EAG3B,EAAA,QAAQ,GAAG,gBAAiB,WAC3B,EAAA,MAAM,QAAU,EAAK,QACrB,EAAA,MAAM,QAAU,EAAK,WAKxB,QAAA,QAAe;;ACuCf,aAAA,IAAA,EAAA,MAAA,KAAA,iBAAA,SAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,IAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IArDA,IAAA,EAAA,EAAA,QAAA,oBACA,EAAA,EAAA,QAAA,mBACA,EAAA,QAAA,iBACA,EAAA,EAAA,QAAA,uBACA,EAAA,EAAA,QAAA,2BACA,EAAA,EAAA,QAAA,aACA,EAAA,EAAA,QAAA,eACA,EAAA,EAAA,QAAA,oBAYA,SAAA,IAEC,SAAS,iBAAiB,UAAW,SAAS,GAC7C,QAAA,UAAU,OAAO,EAAI,SAAS,KAE/B,SAAS,iBAAiB,QAAS,SAAS,GAC3C,QAAA,UAAU,OAAO,EAAI,SAAS,KAE/B,SAAS,eAAe,eAAe,iBAAiB,QAAS,SAAS,GACzE,QAAA,SAAS,KAAK,KAEf,SAAS,eAAe,mBAAmB,iBAAiB,QAAS,SAAS,GAC7E,QAAA,MAAM,gBAGP,QAAA,QAAQ,KAAK,iBACb,QAAA,QAAQ,KAAK,iBAMb,YAAY,WACX,QAAA,QAAQ,KAAK,kBAFI,IAMlB,YAAY,WACX,QAAA,OAAO,UAAU,UAAY,OAC7B,QAAA,OAAO,UAAU,SAAS,EAAE,EAAG,QAAA,OAAO,MAAO,QAAA,OAAO,QACpD,QAAA,QAAQ,KAAK,kBATI,IA9BN,QAAA,SAAW,IAAI,EAAA,QACf,QAAA,QAAU,IAAI,EAAA,aACd,QAAA,OAAS,IAAI,EAAA,QACb,QAAA,OAAS,IAAI,EAAA,QACb,QAAA,UAAY,IAAI,EAAA,QAChB,QAAA,MAAQ,IAAI,EAAA,QAAM,QAAA,SAAS,gBAC3B,QAAA,OAAS,IAAI,EAAA,QAAO,QAAA,SAAS,YAAY,EAAG,QAAA,SAAS,YAAY,GACjE,QAAA,MAAQ,IAAI,EAAA,QAoCzB,OAAO,OAAS,WACf","file":"scripts.8ee2f22a.js","sourceRoot":"..","sourcesContent":["\nclass Canvas{\n    public readonly canvasElement = document.getElementById('main-canvas') as HTMLCanvasElement\n    public readonly canvasCTX = this.canvasElement.getContext('2d') as CanvasRenderingContext2D\n    public readonly height = this.canvasElement.height\n    public readonly width = this.canvasElement.width\n}\n\nexport default Canvas","import {emitter} from '../index'\n\nclass Debug{\n    public playerXPosition = 0\n    public playerYPosition = 0\n    public cameraX = 0\n    public cameraY = 0\n    public weapon = ''\n\tconstructor(){\n\t\t//draw on event \n\t\temitter.on('renderObjects', this.update.bind(this))\n    }\n    update(){\n        const debuggerPanel = document.getElementById('debugger')\n        if(debuggerPanel){\n            var html = \n            `\n            Player X Position: ${this.playerXPosition}\n            <br>\n            Player Y Position: ${this.playerYPosition}\n            <br>\n            Camera X: ${this.cameraX}\n            <br>\n            Camera Y: ${this.cameraY}\n            <br>\n            `\n            debuggerPanel.innerHTML = html\n        }\n    }\n}\n\nexport default Debug","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","class Keystates {\n    public readonly LeftArrow = 37;\n    public readonly UpArrow = 38;\n    public readonly RightArrow = 39;\n    public readonly DownArrow = 40;\n    public readonly Space = 32;\n    public readonly AKey = 65;\n    public readonly DKey = 68;\n    public readonly WKey = 87;\n    public readonly SKey = 83;\n\n    public LeftArrowIsActive = false;\n    public UpArrowIsActive = false;\n    public RightArrowIsActive = false;\n    public DownArrowIsActive = false;\n    public SpaceIsActive = false;\n\n    setKey(keycode:number, state:boolean){\n        switch (keycode) {\n            case this.LeftArrow:\n            case this.AKey:\n                this.LeftArrowIsActive = state;\n                if(state){\n                    this.RightArrowIsActive = false;\n                }\n                break;\n            case this.WKey:\n                case this.UpArrow:\n                this.UpArrowIsActive = state;\n                break;\n            case this.RightArrow:\n            case this.DKey:\n                this.RightArrowIsActive = state;\n                if(state){\n                    this.LeftArrowIsActive = false;\n                }\n                break;\n            case this.SKey:\n            case this.DownArrow:\n                this.DownArrowIsActive = state;\n                break;\n            case this.Space:\n                this.SpaceIsActive = state;\n                break;\n        }\n    }\n}\n\nexport default Keystates\n","export enum RoomSize{\n    small = 0,\n    medium = 1,\n    large = 2\n}\n\nexport default RoomSize","enum Direction{\n    up = \"up\",\n    down = \"down\",\n    left = \"left\",\n    right = \"right\"\n}\n\nexport default Direction","class Coordinate{\n    constructor(public x: number, public y: number){}\n}\n\nexport default Coordinate","import Coordinate from \"./coordinate\"\nimport Direction from \"./direction\"\n\nclass Portal extends Coordinate{\n    //which wall is the portal on\n    public direction: Direction\n    \n    //entrance or exit?\n    public isEntrance: boolean = false\n    public isExit: boolean = false\n\n    constructor(x: number, y: number, direction: Direction){\n        super(x, y)\n        this.direction = direction\n    }\n}\n\nexport default Portal","import { emitter, canvas, level, settings, camera } from '../index'\nimport Coordinate from './coordinate'\n\nclass Tile {\n\tpublic w = settings.tileSize\n\tpublic h = settings.tileSize\n\n\t//position on map in pixels\n\tpublic x: number\n\tpublic y: number\n\n\tpublic fillColor = \"\"\n\tpublic img = \"\"\n\tconstructor(\n\t\tpublic col: number,\n\t\tpublic row: number,\n\t\tpublic isSolid: boolean,\n\t) {\n\t\temitter.on('updatePhysics', this.update.bind(this))\n\t\temitter.on('renderObjects', this.draw.bind(this))\n\t\tthis.x = this.col * this.w\n\t\tthis.y = this.row * this.h\n\t}\n\n\tupdate() {\n\t}\n\n\tdraw() {\n\t\tthis.h = settings.tileSize\n\t\tthis.w = settings.tileSize\n\t\t//determine where to draw the tile\n\t\tlet thickness = 1\n\t\tlet origin = new Coordinate(\n\t\t\tthis.x - camera.originX - (thickness),\n\t\t\tthis.y - camera.originY - (thickness))\n\t\tconst onScreen = \n\t\t\torigin.x + settings.tileSize < 0 &&\n\t\t\torigin.x < canvas.width &&\n\t\t\torigin.y + settings.tileSize < 0 &&\n\t\t\torigin.y < canvas.height\n\t\tif (!onScreen) {\n\t\t\tif (settings.drawTextures) {\n\t\t\t\tlet img = document.getElementById('floor')\n\t\t\t\tlet origin = new Coordinate(this.x - camera.originX, this.y - camera.originY)\n\t\t\t\tcanvas.canvasCTX.drawImage(img, origin.x, origin.y, this.w, this.h)\n\t\t\t} else {\n\t\t\t\t//draw grid\n\t\t\t\tcanvas.canvasCTX.fillStyle = '#DDD'\n\t\t\t\tcanvas.canvasCTX.fillRect(\n\t\t\t\t\torigin.x,\n\t\t\t\t\torigin.y,\n\t\t\t\t\tthis.w + (thickness * 2),\n\t\t\t\t\tthis.h + (thickness * 2)\n\t\t\t\t)\n\t\t\t\t//draw square\n\t\t\t\tcanvas.canvasCTX.fillStyle = this.fillColor ? this.fillColor : this.isSolid ? '#AAA' : '#FFF'\n\t\t\t\tcanvas.canvasCTX.fillRect(\n\t\t\t\t\tthis.x - camera.originX,\n\t\t\t\t\tthis.y - camera.originY,\n\t\t\t\t\tthis.w,\n\t\t\t\t\tthis.h\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default Tile","import RoomSize from \"./room-size\"\nimport Direction from \"./direction\"\nimport Portal from \"./portal\"\nimport Coordinate from \"./coordinate\"\nimport Tile from \"./tile\"\n\nclass Room{\n    public portals: Portal[] = []\n    public tiles: Tile[] = []\n    public w: number = 0\n    public h: number = 0\n    \n    constructor(public size: RoomSize, public origin:Coordinate, public enteredFrom: Direction){\n        //determine sizes\n        switch (size) {\n            case RoomSize.small:\n                this.w = 3\n                this.h = 3\n                break;\n            case RoomSize.medium:\n                this.w = 5\n                this.h = 5\n                break;\n            case RoomSize.large:\n                this.w = 7\n                this.h = 7\n                break;\n            default:\n                break;\n        }\n        //determine portal coordinates\n        //portals are drawn in the middle of each wall\n        //up\n        this.portals.push(new Portal(origin.x + (this.w - 1) / 2, origin.y, Direction.up))\n        //down\n        this.portals.push(new Portal(origin.x + (this.w - 1) / 2, origin.y + this.h -1, Direction.down))\n        //left\n        this.portals.push(new Portal(origin.x, origin.y + (this.h - 1) / 2, Direction.left))\n        //right\n        this.portals.push(new Portal(origin.x + this.w - 1, origin.y + (this.h - 1) / 2, Direction.right))\n\n        switch (this.enteredFrom) {\n            case Direction.up:\n                this.portals.filter(p => p.direction === Direction.up)[0].isEntrance = true\n                break;\n            case Direction.down:\n                this.portals.filter(p => p.direction === Direction.down)[0].isEntrance = true\n                break;\n            case Direction.left:\n                this.portals.filter(p => p.direction === Direction.left)[0].isEntrance = true\n                break;\n            case Direction.right:\n                this.portals.filter(p => p.direction === Direction.right)[0].isEntrance = true\n                break;\n            default:\n                break;\n        }\n    }\n\n    generateTiles(){\n        //generate tiles\n        //inner walkable area\n        for(let col = this.origin.x; col < this.w + this.origin.x; col++){\n            for(let row = this.origin.y; row < this.h + this.origin.y; row++){\n                this.tiles.push(new Tile(col, row, false))\n            }\n        }\n    }\n\n    getEntrancePortal() : Portal {\n        return this.portals.filter(p => p.isEntrance)[0]\n    }\n    getExitPortal() : Portal {\n        return this.portals.filter(p => p.isExit)[0]\n    }\n}\n\nexport default Room","import RoomSize from \"./room-size\"\n\nclass RoomPrefabConfig{\n    constructor(\n        public size: RoomSize,\n        public w: number,\n        public h: number\n    ){}\n}\n\nexport const roomPrefabs: RoomPrefabConfig[] = [\n    new RoomPrefabConfig(RoomSize.large, 7, 7),\n    new RoomPrefabConfig(RoomSize.medium, 5, 5),\n    new RoomPrefabConfig(RoomSize.small, 3, 3),\n]\n\nexport default RoomPrefabConfig","import Direction from \"./direction\"\nimport Portal from \"./portal\"\nimport Tile from \"./tile\"\n\nclass Hallway{\n    public tiles: Tile[] = []\n    \n    constructor(public entrance: Portal, public exit: Portal, width: number){\n        const directionOfTravel = entrance.direction\n        switch(directionOfTravel){\n            case Direction.up:\n                this.tiles.push(new Tile(entrance.x, entrance.y - 1, false))\n                this.tiles.push(new Tile(entrance.x, entrance.y - 2, false))\n                break;\n            case Direction.down:\n                this.tiles.push(new Tile(entrance.x, entrance.y + 1, false))\n                this.tiles.push(new Tile(entrance.x, entrance.y + 2, false))\n                break;\n            case Direction.right:\n                this.tiles.push(new Tile(entrance.x + 1, entrance.y, false))\n                this.tiles.push(new Tile(entrance.x + 2, entrance.y, false))\n                break;\n            case Direction.left:\n                this.tiles.push(new Tile(entrance.x - 1, entrance.y, false))\n                this.tiles.push(new Tile(entrance.x - 2, entrance.y, false))\n                break;\n            default:\n                break;\n        }\n    }\n}\n\nexport default Hallway","import {emitter, debug, settings} from '../index'\nimport Tile from './tile'\nimport Room from './room'\nimport Direction from './direction'\nimport { roomPrefabs } from './room-prefab-config'\nimport Coordinate from './coordinate'\nimport RoomSize from './room-size'\nimport Hallway from './hallway'\n\nclass Level {\n    //offset data is stored in the level so that each level can load the player in at a different point,\n    //rather than starting the player at 0,0 offset\n    public rooms: Room[] = []\n    public hallways: Hallway[] = []\n    constructor(roomCount: number = 5){\n        this.generateMap(roomCount)\n    }\n\n    generateMap(roomCount: number){\n        //generation vars\n        let canMove = true\n        let moves = 0\n        this.rooms = []\n        \n        //hardcode first room\n        let firstRoom = new Room(RoomSize.large, new Coordinate(0,0), Direction.up)\n        firstRoom.generateTiles()\n        this.rooms.push(firstRoom)\n\n        //generate rooms until we reach the room limit\n        while(canMove){\n            moves++ \n            if(moves >= roomCount){\n                canMove = false\n            } \n\n            let previousRoom = this.rooms[this.rooms.length - 1]\n            let possibleRooms = this.getPossibleRooms(previousRoom)\n            let chosenRoom = possibleRooms[Math.floor(Math.random() * possibleRooms.length)]\n            \n            previousRoom.portals.filter(p => \n                p.direction === this.getOppositeDirection(chosenRoom.enteredFrom)\n            )[0].isExit = true\n\n            this.rooms.push(chosenRoom)\n            chosenRoom.generateTiles()\n            \n            this.hallways.push(new Hallway(\n                previousRoom.getExitPortal(),\n                chosenRoom.getEntrancePortal(), \n                1)\n            )\n\n        }\n        console.log(this.rooms)\n    }\n\n     getPossibleRooms(room: Room): Room[]{\n        let possibleRooms: Room[] = []\n\n        //check each portal\n        room.portals.forEach(portal => {\n            //draw new rooms based on ingress\n            //keep in mind the ingress is the centerpoint of the room\n            //adjust accordingly for new origin\n            roomPrefabs.forEach(prefab => {\n                let proposedOrigin = new Coordinate(0,0)\n                //get origin for ingress and prefab\n                switch (portal.direction) {\n                    //portal direction is the direction of travel\n                    case Direction.up:\n                        proposedOrigin.x = portal.x - (prefab.w - 1) / 2\n                        proposedOrigin.y = portal.y - 2 - prefab.h\n                        break;\n                    case Direction.down:\n                        proposedOrigin.x = portal.x - (prefab.w - 1) / 2\n                        proposedOrigin.y = portal.y + 3\n                    break;\n                    case Direction.left:\n                        proposedOrigin.x = portal.x - prefab.w - 2\n                        proposedOrigin.y = portal.y - (prefab.h - 1) / 2\n                    break;\n                    case Direction.right:\n                        proposedOrigin.x = portal.x + 3\n                        proposedOrigin.y = portal.y - (prefab.h - 1) / 2\n                    break;\n                    default:\n                        break;\n                }\n                //generate new room from proposed origin\n                let newRoom = new Room(\n                    prefab.size,\n                    new Coordinate(proposedOrigin.x, proposedOrigin.y),\n                    this.getOppositeDirection(portal.direction)\n                )\n                //check room collision against carved tiles\n                if(proposedOrigin.x >= 0 && proposedOrigin.y >= 0){\n                    if(portal.direction == Direction.down || portal.direction == Direction.right){\n                        possibleRooms.push(newRoom)\n                    }\n                }\n            })\n        })\n        return possibleRooms\n    }\n\n    getOppositeDirection(d: Direction): Direction{\n        switch (d) {\n            case Direction.up:\n                return Direction.down\n            case Direction.down:\n                return Direction.up\n            case Direction.left:\n                return Direction.right\n            case Direction.right:\n                return Direction.left\n\n        }\n    }\n\n    getTileByCoords(x: number, y:number): Tile | null{\n        let tile = null\n        this.rooms.forEach(r => {\n            r.tiles.forEach(t => {\n                if(t.col == x && t.row == y){\n                    tile = t\n                }\n            })\n        })\n        this.hallways.forEach(h => {\n            h.tiles.forEach(t => {\n                if(t.col == x && t.row == y){\n                    tile = t\n                }\n            })\n        })\n        return tile\n    }\n\n    isTileSolid(x: number, y: number): boolean{\n        const tile = this.getTileByCoords(x, y)\n        return tile == null || tile.isSolid\n    }\n}\n\nexport default Level","import {\n\temitter,\n\tkeystates,\n\tlevel,\n\tcanvas,\n\tdebug,\n\tsettings,\n\tcamera\n} from './index'\n\nclass Player {\n\tpublic id = 1\n\tpublic height = 5\n\tpublic width = 5\n\tpublic direction = 'right'\n\tpublic moveSpeed: number = 5\n\n\tconstructor(\n\t\tpublic x: number, \n\t\tpublic y: number\n\t){\n\t\tcamera.originX = x - canvas.width / 2\n\t\tcamera.originY = y - canvas.height / 2\n\t\temitter.on('updatePhysics', this.update.bind(this))\n\t\temitter.on('renderObjects', this.draw.bind(this))\n\t}\n\n\tdraw(){\n\t\t//draw player\n\t\tcanvas.canvasCTX.fillStyle = '#000000'\n\t\tcanvas.canvasCTX.fillRect(\n\t\t\tcanvas.width / 2 - this.width /2,\n\t\t\tcanvas.height / 2 - this.height /2,\n\t\t\tthis.width, \n\t\t\tthis.height\n\t\t)\n\t}\n\n\tupdate(){\n\t\t//distance to move\n\t\tlet delta = 0\n\t\t//move player based on input\n\t\tif (keystates.RightArrowIsActive) {\n\t\t\tthis.direction = 'right'\n\t\t\tdelta = this.moveSpeed\n\t\t\tthis.moveHorizontal(delta)\n\t\t} \n\t\tif (keystates.LeftArrowIsActive) {\n\t\t\tthis.direction = 'left'\n\t\t\tdelta = this.moveSpeed * -1\n\t\t\tthis.moveHorizontal(delta)\n\t\t}\n\t\tif (keystates.UpArrowIsActive) {\n\t\t\tthis.direction = 'up'\n\t\t\tdelta = this.moveSpeed * -1\n\t\t\tthis.moveVertical(delta)\n\t\t}\n\t\tif (keystates.DownArrowIsActive) {\n\t\t\tthis.direction = 'down'\n\t\t\tdelta = this.moveSpeed\n\t\t\tthis.moveVertical(delta)\n\t\t}\n\n\t\t//log player stats to debugger\n\t\tdebug.playerXPosition = this.x\n\t\tdebug.playerYPosition = this.y\n\t}\n\n\tmoveVertical(delta: number){\n\t\t//move down\n\t\tif(delta > 0){\n\t\t\tfor (let i = 1; i <= delta; i++) {\n\t\t\t\tthis.y++\n\t\t\t\tif(!this.validatePosition()){\n\t\t\t\t\tthis.y--\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcamera.originY++\n\t\t\t}\n\t\t//move up\n\t\t}else{\n\t\t\tfor (let i = -1; i >= delta; i--) {\n\t\t\t\tthis.y--\n\t\t\t\tif(!this.validatePosition()){\n\t\t\t\t\tthis.y++\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcamera.originY--\n\t\t\t}\n\t\t}\n\t}\n\n\tmoveHorizontal(delta: number){\n\t\t//move right\n\t\tif(delta > 0){\n\t\t\tfor (let i = 1; i <= delta; i++) {\n\t\t\t\tthis.x++\n\t\t\t\tif(!this.validatePosition()){\n\t\t\t\t\tthis.x--\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcamera.originX++\n\t\t\t}\n\t\t//move left\n\t\t}else{\n\t\t\tfor (let i = -1; i >= delta; i--) {\n\t\t\t\tthis.x--\n\t\t\t\tif(!this.validatePosition()){\n\t\t\t\t\tthis.x++\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\tcamera.originX--\n\t\t\t}\n\t\t}\n\t}\n\n\tvalidatePosition(){\n\t\tlet positionIsValid = true\n\t\t//get all tiles player is occupying, check for collisions\n\t\t//col the player's left side is in\n\t\tconst playerLeftAlignment = Math.floor(this.x / settings.tileSize);\n\t\t//col the player's right side is in\n\t\tconst playerRightAlignment = Math.floor((this.x + this.width) / settings.tileSize);\n\t\t//row the player's top is in\n\t\tconst playerTopAlignment = Math.floor(this.y / settings.tileSize);\n\t\t//row the player's bottom is in\n\t\t//-1 prevents floor from stopping movement\n\t\tconst playerBottomAlignment = Math.floor((this.y + this.height - 1) / settings.tileSize);\n\n\n\t\t//check level data and see if any of the intersected tiles are solid\n\t\t//at most, four tiles to check\n\t\t//top left\n\t\tif(level.isTileSolid(playerLeftAlignment, playerTopAlignment)) positionIsValid = false\n\t\t//top right\n\t\tif(level.isTileSolid(playerRightAlignment, playerTopAlignment)) positionIsValid = false\n\t\t//bottom left\n\t\tif(level.isTileSolid(playerLeftAlignment, playerBottomAlignment)) positionIsValid = false\n\t\t//bottom right\n\t\tif(level.isTileSolid(playerRightAlignment, playerBottomAlignment)) positionIsValid = false\n\n\t\t//return validity of position\n\t\treturn positionIsValid;\n\t}\n}\n\nexport default Player","import Coordinate from \"./map-generation/coordinate\"\n\nclass Settings {\n    public tileSize = 25\n    public drawTextures = false\n    public playerStart = new Coordinate(10,10)\n    public levelRoomCount = 5\n\n    zoom(event: WheelEvent){\n        event.preventDefault()\n        if(event.deltaY > 0){\n            this.tileSize += -2\n        }\n        else{\n            this.tileSize += 2\n        }\n    }\n}\n\nexport default Settings","import {emitter, debug} from '../index' \n\nclass Camera {\n    public originX: number = 0\n    public originY: number = 0\n\tconstructor(\n\t) {  \n\t\temitter.on('renderObjects', () => {\n\t\t\tdebug.cameraX = this.originX\n\t\t\tdebug.cameraY = this.originY\n\t\t})\n\t}\n}\n\nexport default Camera","import Canvas from './engine/canvas'\nimport Debug from './engine/debug'\nimport {EventEmitter} from 'eventemitter3'\nimport Keystates from './engine/keystates'\nimport Level from './map-generation/level'\nimport Player from './player'\nimport Settings from './settings'\nimport Camera from './engine/camera'\n\n//dont reorder these\nexport const settings = new Settings()\nexport const emitter = new EventEmitter()\nexport const canvas = new Canvas()\nexport const camera = new Camera()\nexport const keystates = new Keystates()\nexport const level = new Level(settings.levelRoomCount)\nexport const player = new Player(settings.playerStart.x, settings.playerStart.y)\nexport const debug = new Debug()\n\nfunction main(){\n\t//register key listeners\n\tdocument.addEventListener(\"keydown\", function(evt) {\n\t\tkeystates.setKey(evt.keyCode, true)\n\t})\n\tdocument.addEventListener(\"keyup\", function(evt) {\n\t\tkeystates.setKey(evt.keyCode, false)\n\t})\n\tdocument.getElementById(\"main-canvas\").addEventListener('wheel', function(evt) {\n\t\tsettings.zoom(evt)\n\t})\n\tdocument.getElementById(\"generate-button\").addEventListener('click', function(evt){\n\t\tlevel.generateMap()\n\t})\n\n\temitter.emit('updatePhysics')\n\temitter.emit('renderObjects')\n\n\n\n\t// calc physics, 32 for 30 fps, 16 for 60\n\tconst framerate = 32\n\tsetInterval(function(){\n\t\temitter.emit('updatePhysics')\n\t}, framerate)\n\n\t//draw at 60 fps as well\n\tsetInterval(function(){\n\t\tcanvas.canvasCTX.fillStyle = '#DDD'\n\t\tcanvas.canvasCTX.fillRect(0,0, canvas.width, canvas.height)\n\t\temitter.emit('renderObjects')\n\t}, framerate)\n}\n\nwindow.onload = function(){\n\tmain()\n}\n"]}